subroutine da_recursive_filter_1d(npass, alpha, field2d, n1, n2)

   !----------------------------------------------------------------------------------
   ! Purpose: Perform npass passes of recursive filter across 1D segments of 2D array
   !
   ! Method:  Perform right-moving filter followed by left-moving filter.
   !----------------------------------------------------------------------------------

   implicit none

   integer, intent(in)    :: npass          ! Number of filter passes.
   real*8,  intent(in)    :: alpha          ! Alpha coefficient for RF.
   real*8,  intent(inout) :: field2d(n1,n2) ! Array to be filtered.
   integer, intent(in)    :: n1,n2              ! Size of field2d array.

   integer :: i1, i2, pass   ! Loop counters.
   real    :: one_alpha      ! 1 - alpha.
   real    :: a(n1)         ! Input field.
   real    :: b(n1)         ! Field after left-right pass.
   real    :: c(n1)         ! Field after right-left pass.

   if (trace_use_dull) call da_trace_entry("da_recursive_filter_1d")

   !-------------------------------------------------------------------------
   ! [1.0] Initialise:
   !-------------------------------------------------------------------------

   one_alpha = 1.0 - alpha

   do pass = 1, npass

      !$OMP PARALLEL DO &
      !$OMP PRIVATE ( i1, i2, a, b, c )
      do i2 = 1, n2

         a = field2d(:,i2)

         !-------------------------------------------------------------------------
         ! [2.0] Perform right-moving filter:
         !-------------------------------------------------------------------------

         ! use turning conditions as in the appendix of Hayden & Purser (1995):

         if (pass == 1) then
            b(1) = one_alpha * a(1)
         else if (pass == 2) then
            b(1) = a(1) / (1.0 + alpha)
         else
            b(1) = one_alpha * (a(1) - alpha**3 * a(2)) / (1.0 - alpha**2)**2
         end if

         ! [2.2] Perform pass left to right:

         do i1 = 2, n1
            b(i1) = alpha * b(i1-1) + one_alpha * a(i1)
         end do

         !-------------------------------------------------------------------------
         ! [3.0] Perform left-moving filter:
         !-------------------------------------------------------------------------

         ! use turning conditions as in the appendix of Hayden & Purser (1995):

         if (pass == 1) then
            c(n1) = b(n1) / (1.0 + alpha)
         else
            c(n1) = one_alpha * (b(n1) - alpha**3 * b(n1-1)) / (1.0 - alpha**2)**2
         end if

         ! [3.2] Perform pass right to left:

         do i1 = n1-1, 1, -1
            c(i1) = alpha * c(i1+1) + one_alpha * b(i1)
         end do

         field2d(:,i2) = c

      end do !i2 loop
      !$OMP END PARALLEL DO

   end do !pass loop

   if (trace_use_dull) call da_trace_exit("da_recursive_filter_1d")
   
end subroutine da_recursive_filter_1d

